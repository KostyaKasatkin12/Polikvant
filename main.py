import asyncio
import sqlite3
import random
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = ""
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
QUOTES = []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ —Ü–∏—Ç–∞—Ç —Å —Å–∞–π—Ç–∞
def fetch_quotes():
    global QUOTES
    url = "https://ru.citaty.net/temy/distsiplina/"
    try:
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        quote_elements = soup.find_all("div", class_="quote__body")
        QUOTES = [quote.get_text(strip=True) for quote in quote_elements]
        if not QUOTES:
            QUOTES = [
                "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –¥–µ–ª–∞—Ç—å —Ç–æ, —á–µ–≥–æ –æ—á–µ–Ω—å –Ω–µ —Ö–æ—á–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ç–æ–≥–æ, —á–µ–≥–æ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è –¥–æ—Å—Ç–∏—á—å."]
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(QUOTES)} —Ü–∏—Ç–∞—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–∏—Ç–∞—Ç: {e}")
        QUOTES = [
            "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –¥–µ–ª–∞—Ç—å —Ç–æ, —á–µ–≥–æ –æ—á–µ–Ω—å –Ω–µ —Ö–æ—á–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ç–æ–≥–æ, —á–µ–≥–æ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è –¥–æ—Å—Ç–∏—á—å."]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect("schedule.db")
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–¥–∞—á
    c.execute("""CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        category TEXT,
        task TEXT,
        time TEXT
    )""")

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY
    )""")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±–µ—Ü id –≤ —Ç–∞–±–ª–∏—Ü–µ tasks
    c.execute("PRAGMA table_info(tasks)")
    columns = [col[1] for col in c.fetchall()]
    if 'id' not in columns:
        c.execute("""CREATE TABLE temp_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            category TEXT,
            task TEXT,
            time TEXT
        )""")
        c.execute(
            "INSERT INTO temp_tasks (user_id, category, task, time) SELECT user_id, category, task, time FROM tasks")
        c.execute("DROP TABLE tasks")
        c.execute("ALTER TABLE temp_tasks RENAME TO tasks")

    conn.commit()
    conn.close()


init_db()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
def add_user(user_id):
    conn = sqlite3.connect("schedule.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_users():
    conn = sqlite3.connect("schedule.db")
    c = conn.cursor()
    c.execute("SELECT user_id FROM users")
    users = [row[0] for row in c.fetchall()]
    conn.close()
    return users


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç
async def send_quotes_periodically():
    while True:
        if QUOTES:
            quote = random.choice(QUOTES)
            users = get_all_users()
            for user_id in users:
                try:
                    await bot.send_message(user_id, f"üí° –¶–∏—Ç–∞—Ç–∞ –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ:\n{quote}")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class TaskForm(StatesGroup):
    category = State()
    task = State()
    time = State()
    delete_id = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
def get_menu_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")]
    ])


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_command(message: Message):
    user_id = message.from_user.id
    add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–®–∫–æ–ª–∞", callback_data="category_school")],
        [InlineKeyboardButton(text="–•–æ–±–±–∏", callback_data="category_hobby")],
        [InlineKeyboardButton(text="–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="category_freetime")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@dp.callback_query(lambda c: c.data == "menu")
async def process_menu(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–®–∫–æ–ª–∞", callback_data="category_school")],
        [InlineKeyboardButton(text="–•–æ–±–±–∏", callback_data="category_hobby")],
        [InlineKeyboardButton(text="–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="category_freetime")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data.startswith("category_"))
async def process_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(category=category)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"add_{category}"),
            InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data=f"view_{category}")
        ],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete_{category}")]
    ])
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.capitalize()}", reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_task(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskForm.task)
    await callback.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message(TaskForm.task)
async def process_task_description(message: Message, state: FSMContext):
    await state.update_data(task=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):", reply_markup=get_menu_button())
    await state.set_state(TaskForm.time)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(TaskForm.time)
async def process_task_time(message: Message, state: FSMContext):
    user_data = await state.get_data()
    category = user_data["category"]
    task = user_data["task"]
    time = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("schedule.db")
    c = conn.cursor()
    c.execute("INSERT INTO tasks (user_id, category, task, time) VALUES (?, ?, ?, ?)",
              (user_id, category, task, time))
    conn.commit()
    conn.close()

    await message.answer(
        f"–ó–∞–¥–∞—á–∞ '{task}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category.capitalize()}' –Ω–∞ {time}!",
        reply_markup=get_menu_button()
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ"
@dp.callback_query(lambda c: c.data.startswith("view_"))
async def view_tasks(callback: CallbackQuery):
    category = callback.data.split("_")[1]
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("schedule.db")
    c = conn.cursor()
    c.execute("SELECT id, task, time FROM tasks WHERE user_id = ? AND category = ?", (user_id, category))
    tasks = c.fetchall()
    conn.close()

    if tasks:
        response = f"–ó–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.capitalize()}':\n"
        for task_id, task, time in tasks:
            response += f"ID: {task_id} - {task} ({time})\n"
    else:
        response = f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.capitalize()}' –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á."

    await callback.message.edit_text(response, reply_markup=get_menu_button())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_task_prompt(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(category=category)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (ID) –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(TaskForm.delete_id)
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
@dp.message(TaskForm.delete_id)
async def process_task_deletion(message: Message, state: FSMContext):
    user_data = await state.get_data()
    category = user_data["category"]
    user_id = message.from_user.id
    try:
        task_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).",
                             reply_markup=get_menu_button())
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    conn = sqlite3.connect("schedule.db")
    c = conn.cursor()
    c.execute("SELECT id FROM tasks WHERE id = ? AND user_id = ? AND category = ?",
              (task_id, user_id, category))
    task = c.fetchone()
    if task:
        c.execute("DELETE FROM tasks WHERE id = ? AND user_id = ? AND category = ?",
                  (task_id, user_id, category))
        conn.commit()
        await message.answer(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_menu_button())
    else:
        await message.answer(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.capitalize()}'.",
                             reply_markup=get_menu_button())
    conn.close()
    await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    fetch_quotes()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç
    asyncio.create_task(send_quotes_periodically())
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    print('–ë–æ—Ç –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∑–∞–ø—É—â–µ–Ω')
    asyncio.run(main())

